extends layout
block append styles
    link(rel='stylesheet', href='/stylesheets/highlight_default.css')
block append scripts
    script.

        // convert source to marked, require 'marked'
        function convert() {
            getPreviewer().innerHTML = marked(editor.getValue());
        }
        // get the previewer element
        function getPreviewer(index) {
            return document.getElementById("previewer");
        }
        // locate the size
        function locate() {
            var clientHeight = document.documentElement.clientHeight;
            var clientWidth = document.documentElement.clientWidth;
            var halfWidth = (clientWidth - 100) / 2;
            document.getElementById("editor").setAttribute("style", "width:" + halfWidth + "px;height:" + (clientHeight - 90) + "px")
            document.getElementById("previewer").setAttribute("style", "width:" + halfWidth + "px" + ";left:" + (halfWidth + 40) + "px;height:" + (clientHeight - 90) + "px");
            document.getElementById("main").setAttribute("style", "height:" + (clientHeight - 50) + "px");
        }
        // code highlight, require 'highlight'
        function code_highlight(code, lang, callback) {
            if (hljs.getLanguage(lang)) {
                return hljs.highlight(lang, code).value;
            }

            //console.log(lang);
            //console.log(code);
            //console.log(callback);
            //console.log(hljs.highlight(lang, code, false, true).value);
            //return code;
        }
block head
    div.head Editor

block body
    div.main#main
        pre#editor
        div#previewer
        //- script
        script(src='/javascripts/marked.js')
        script(src='/javascripts/highlight.pack.js')
        script(src='/javascripts/ace.js')
        script(src='/javascripts/ace_mode_markdown.js')
        script(src='/javascripts/ace_theme_dawn.js')
        script.
            /* locate */
            locate();
            document.body.onresize = locate;
            /* marked */
            marked.setOptions({
                highlight: code_highlight
            });
            /** previewer */
            var previewer = document.getElementById("previewer");
            /* editor */
            var editor = ace.edit("editor");
            editor.session.setMode("ace/mode/markdown")// set markdown mode
            editor.setFontSize(15); // set font-size
            //editor.renderer.setShowGutter(false); // disable the line-numbers
            editor.renderer.setPadding(10); // set padding=10
            editor.session.setUseWrapMode(true); // use wrap mode, force warp line
            editor.setTheme("ace/theme/dawn"); // set the theme
            //editor.setTheme("ace/theme/twilight");
            editor.setShowPrintMargin(false); // disable the print-margin
            //editor.setShowLineNumbers(false);
            editor.setShowFoldWidgets(false); // disable fold wigets
            //editor.setShowInvisibles(true); // show invisible characters
            editor.$blockScrolling = Infinity; // disable warning message
            editor.on('change', function (e) { // content-change event
                convert();
                localStorage.setItem('editor', editor.getValue());
            });
            editor.session.on('changeScrollTop', function () { // scroll-top-change event
                if (!window.e_s_timer) {
                    window.e_s_timer = setTimeout(function () {
                        try {
                            if (window.p_s_timer) {
                                return;
                            }
                            window.p_s_timer = 1;
                            console.log("catch edit scrolling.");
                            var vRow = editor.getFirstVisibleRow();
                            var lastE = getLastRelRowEle(vRow);
                            if (!lastE.e) {
                                throw  new Error("Wrong lastE.");
                            }
                            var nextE = getNextRelRowEle(vRow);
                            var pDis, eDis, eLast = editor.renderer.$cursorLayer.getPixelPosition({row: lastE.row}).top;
                            if (!nextE.e) {
                                pDis = previewer.scrollHeight - lastE.e.offsetTop;
                                eDis = editor.renderer.$cursorLayer.getPixelPosition({row: editor.session.getLength() - 1}).top - eLast;
                            } else {
                                pDis = nextE.e.offsetTop - lastE.e.offsetTop;
                                eDis = editor.renderer.$cursorLayer.getPixelPosition({row: nextE.row}).top - eLast;
                            }
                            if (pDis <= 0 || eDis <= 0) {
                                throw new Error("Wrong Dis.");
                            }
                            var factor = pDis / eDis;
                            var eOffset = editor.session.getScrollTop() - eLast;
                            previewer.scrollTop = lastE.e.offsetTop + eOffset * factor;
                        } finally {
                            window.e_s_timer = undefined;
                            setTimeout(function () {
                                window.p_s_timer = 0;
                            }, 100);
                        }
                    }, 100);
                }
            })

            previewer.onscroll = function () {
                if (!window.p_s_timer) {
                    window.p_s_timer = setTimeout(function () {
                        try {
                            if (window.e_s_timer) {
                                return;
                            }
                            window.e_s_timer = 1;
                            console.log("catch preview scrolling.");
                            var lastE = findPreingEle();
                            if (!lastE.e) {
                                throw  new Error("Wrong lastE.");
                            }
                            var nextE = getNextRelRowEle(lastE.row);
                            var pDis, eDis, eLast = editor.renderer.$cursorLayer.getPixelPosition({row: lastE.row}).top;
                            if (!nextE.e) {
                                pDis = previewer.scrollHeight - lastE.e.offsetTop;
                                eDis = editor.renderer.$cursorLayer.getPixelPosition({row: editor.session.getLength() - 1}).top - eLast;
                            } else {
                                pDis = nextE.e.offsetTop - lastE.e.offsetTop;
                                eDis = editor.renderer.$cursorLayer.getPixelPosition({row: nextE.row}).top - eLast;
                            }
                            if (pDis <= 0 || eDis <= 0) {
                                throw new Error("Wrong Dis.");
                            }
                            var factor = eDis / pDis;
                            var pLast = lastE.e.offsetTop;
                            var pOffset = previewer.scrollTop - pLast;
                            editor.session.setScrollTop(eLast + pOffset * factor);
                        } finally {
                            window.p_s_timer = undefined;
                            setTimeout(function () {
                                window.e_s_timer = 0;
                            }, 100);
                        }
                    }, 100);
                }
                //console.log("Caculate left: " + (editor.renderer.lineHeight * preingEle.row + offset) + "; offset " + offset + "; row at " + preingEle.row);

                //editor.session.setScrollTop(editor.renderer.lineHeight*preingEle.row+offset);
                //editor.session.setScrollTop(previewer.scrollTop);
            }
            function findPreingEle() {
                if (previewer.scrollTop === 0) {
                    return {e: previewer.querySelector('[row_' + 0 + ']'), row: 0};
                }
                var cur = getNextRelRowEle(0);
                while (cur.e) {
                    var next = getNextRelRowEle(cur.row);
                    if (next.e && next.e.offsetTop - 19 > previewer.scrollTop) {
                        return cur;
                    }
                    cur = next;
                }
            }

            function getLastRelRowEle(row) {
                var ele;
                while (!ele && row >= 0) {
                    ele = previewer.querySelector('[row_' + row + ']');
                    row--;
                }
                return {e: ele, row: ++row};
            }

            function getNextRelRowEle(row) {
                var ele;
                row += 1;
                while (!ele && row < editor.session.getLength()) {
                    ele = previewer.querySelector('[row_' + row + ']');
                    row++;
                }
                return {e: ele, row: --row};
            }

            //
            if (localStorage.getItem('editor')) {
                if (localStorage.hasOwnProperty('editor')) {
                    editor.setValue(localStorage.getItem('editor'), -1);
                }
            }
            //reset the undo manager
            var undoManager = editor.session.getUndoManager();
            undoManager.reset();
            editor.session.setUndoManager(undoManager);
block foot
    //-clear foot